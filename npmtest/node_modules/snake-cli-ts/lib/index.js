#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var SnakeGame_1 = __importDefault(require("./core/SnakeGame"));
var CLIMenu_1 = __importDefault(require("./CLIMenu"));
var Console_1 = __importDefault(require("./helpers/Console"));
if (require.main === module) {
    Console_1.default.hideCursor();
    var Sleep_1 = function (ts) { return new Promise(function (res) { return setTimeout(res, ts); }); };
    var blink_1 = function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    Console_1.default.clear();
                    return [4, Sleep_1(400)];
                case 1:
                    _a.sent();
                    game_1.printer.print();
                    return [4, Sleep_1(400)];
                case 2:
                    _a.sent();
                    return [2];
            }
        });
    }); };
    var game_1 = new SnakeGame_1.default({
        moveThroughWall: false,
        difficulty: 'easy',
    }).on('gameOver', function () { return __awaiter(void 0, void 0, void 0, function () {
        var i;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    i = 0;
                    _a.label = 1;
                case 1:
                    if (!(i < 4)) return [3, 4];
                    return [4, blink_1()];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3:
                    i++;
                    return [3, 1];
                case 4: return [4, Sleep_1(1000)];
                case 5:
                    _a.sent();
                    game_1.destroy();
                    gameOverMenu_1.init();
                    return [2];
            }
        });
    }); });
    var gameOverMenu_1 = new CLIMenu_1.default({
        title: "\n   ______                        ____                         \n  / ____/___ _____ ___  ___     / __ \\_   _____  _____      \n / / __/ __ `/ __ `__ \\/ _ \\   / / / / | / / _ \\/ ___/ \n/ /_/ / /_/ / / / / / /  __/  / /_/ /| |/ /  __/ /         \n\\____/\\__,_/_/ /_/ /_/\\___/   \\____/ |___/\\___/_/     \n",
        options: [
            {
                onInit: function () {
                    this.name = "Your score is " + (game_1.snake.body.length * 10 - 10) + " points!\n";
                },
                disabled: true,
            },
            {
                name: 'Play again',
                callback: function () {
                    this.menu.destroy();
                    game_1.init();
                },
            },
            {
                name: 'Back to main menu',
                callback: function () {
                    this.menu.destroy();
                    mainMenu_1.init();
                },
            },
            {
                name: 'Exit',
                callback: function () {
                    Console_1.default.reset();
                    process.exit();
                },
            },
        ],
    });
    var mainMenu_1 = new CLIMenu_1.default({
        title: "\n     _____             __           ________    ____     \n    / ___/____  ____ _/ /_____     / ____/ /   /  _/     \n    \\__ \\/ __ \\/ __ `/ //_/ _ \\   / /   / /    / /  \n   ___/ / / / / /_/ / ,< /  __/  / /___/ /____/ /        \n  /____/_/ /_/\\__,_/_/|_|\\___/   \\____/_____/___/     \n\n\n",
        options: [
            {
                name: 'Start game',
                callback: function () {
                    this.menu.destroy();
                    game_1.init();
                },
            },
            {
                name: 'Options',
                submenu: [
                    {
                        name: (game_1.get('moveThroughWall') ? '[*]' : '[ ]') + " Let the snake walk through the walls",
                        value: game_1.get('moveThroughWall'),
                        callback: function () {
                            this.value = !this.value;
                            this.name = (this.value ? '[*]' : '[ ]') + " Let the snake walk through the walls";
                            game_1.set('moveThroughWall', this.value);
                            this.menu.print();
                        },
                    },
                    {
                        name: "Difficulty: " + game_1.get('difficulty'),
                        value: {
                            levels: ['easy', 'medium', 'hard'],
                            selected: game_1.get('difficulty'),
                        },
                        callback: function () {
                            var currentIndex = this.value.levels.indexOf(game_1.get('difficulty'));
                            this.value.selected = this.value.levels[currentIndex + 1] || this.value.levels[0];
                            this.name = "Difficulty: " + this.value.selected;
                            game_1.set('difficulty', this.value.selected);
                            this.menu.print();
                        },
                    },
                    {
                        disabled: true,
                    },
                    {
                        name: 'Back',
                        callback: function () {
                            this.back();
                        },
                    },
                ],
            },
            {
                name: 'Exit',
                callback: function () {
                    Console_1.default.reset();
                    process.exit();
                },
            },
        ],
    });
    mainMenu_1.init();
}
exports.default = SnakeGame_1.default;
